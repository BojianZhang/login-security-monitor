version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: login-monitor-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${DB_NAME:-secure_email_system}
      MYSQL_USER: ${DB_USERNAME:-secure_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-secure_pass}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./database/init-data.sql:/docker-entrypoint-initdb.d/02-init-data.sql:ro
      - ./mysql/conf.d:/etc/mysql/conf.d:ro
    networks:
      - login-monitor-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD:-rootpassword}"]
      timeout: 20s
      retries: 10

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: login-monitor-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - login-monitor-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis123}", "ping"]
      timeout: 3s
      retries: 5

  # 后端应用
  backend:
    build: 
      context: .
      dockerfile: backend/Dockerfile
    container_name: login-monitor-backend
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # 数据库配置
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: ${DB_NAME:-secure_email_system}
      DB_USERNAME: ${DB_USERNAME:-secure_user}
      DB_PASSWORD: ${DB_PASSWORD:-secure_pass}
      
      # Redis配置
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      
      # JWT配置 - 请使用generate-secure-config.sh生成安全密钥
      JWT_SECRET: ${JWT_SECRET:-PLEASE_GENERATE_SECURE_KEY_WITH_SCRIPT}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-86400000}
      
      # 邮件配置
      MAIL_HOST: ${MAIL_HOST:-smtp.gmail.com}
      MAIL_PORT: ${MAIL_PORT:-587}
      MAIL_USERNAME: ${MAIL_USERNAME:-your-email@gmail.com}
      MAIL_PASSWORD: ${MAIL_PASSWORD:-your-app-password}
      MAIL_FROM: ${MAIL_FROM:-Security Monitor <noreply@yourcompany.com>}
      
      # 应用配置
      SERVER_PORT: 8080
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # 管理员邮箱
      ADMIN_EMAILS: ${ADMIN_EMAILS:-admin@yourcompany.com,security@yourcompany.com}
    ports:
      - "8080:8080"
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config:ro
    networks:
      - login-monitor-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/actuator/health"]
      timeout: 10s
      retries: 5
      start_period: 60s

  # 前端应用
  frontend:
    build: 
      context: .
      dockerfile: frontend/Dockerfile
    container_name: login-monitor-frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "80:80"
    networks:
      - login-monitor-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      timeout: 5s
      retries: 3

  # Nginx反向代理（生产环境用）
  nginx-proxy:
    image: nginx:alpine
    container_name: login-monitor-proxy
    restart: unless-stopped
    depends_on:
      - frontend
      - backend
    ports:
      - "443:443"
      - "8443:8443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - login-monitor-network
    profiles:
      - production

  # Prometheus监控（可选）
  prometheus:
    image: prom/prometheus:latest
    container_name: login-monitor-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - login-monitor-network
    profiles:
      - monitoring

  # Grafana仪表板（可选）
  grafana:
    image: grafana/grafana:latest
    container_name: login-monitor-grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    networks:
      - login-monitor-network
    profiles:
      - monitoring

networks:
  login-monitor-network:
    driver: bridge

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local